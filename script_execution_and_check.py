import os
import re
import io
import sys
import json
import traceback
from io import StringIO
import matplotlib
import matplotlib.pyplot as plt
from IPython import get_ipython

from output_formatting import extract_all_scripts,get_error_explanation_and_fix


###########################################

def run_script(script,local_vars):

    # Save the original stdout
    original_stdout = sys.stdout

    try:
        # Redirect stdout to os.devnull to discard all printed output
        sys.stdout = open(os.devnull, 'w')

        get_ipython().run_line_magic('matplotlib', 'agg') 

        exec(script,local_vars)

        # Restore the original stdout
        plt.close()
        get_ipython().run_line_magic('matplotlib', 'inline')
        sys.stdout = original_stdout

        return True
    
    except Exception as e:

        # Restore the original stdout
        sys.stdout = original_stdout
        
        # Capture the full traceback as a string
        traceback_str = traceback.format_exc()

        # Print the traceback
        # print("Traceback captured:")
        # print(traceback_str)

        # Example: Store the traceback in a variable to pass to another program
        error_report = f"An error occurred: {e}\n\nTraceback:\n{traceback_str}"

        return error_report

###########################################

def check_and_fix_script(script,local_vars,llm,fix_count=3):
    error_details = []
    for i in range(1,fix_count+1):
        if run_script(script,local_vars)==True:
            pass
            print(f"Script Executed successfully..!")
            return script,error_details
        else:
            # print(f"Fixing code, attempt no. {i}")
            # print(f"*"*80)
            # print("\n")
            
            #######################################
            input_script = script
            error_message  = run_script(input_script,local_vars)
            message_to_llm = f"""Please fix this script:\n{input_script}.\nThis is the error message{error_message}.
            IMPORTANT NOTE: Always begin a code block with **Script** heading.
            Try to follow this format for the output:
            **Script:**
            ```
            print(df.columns)
            ```
            ."""
            response = llm.invoke(message_to_llm)
            output = response.content
            
            # print(f"LLM1 (This generates script to fix the error):\n"+"*"*30)
            # print(output)
            script_sections = extract_all_scripts(output, "**Script:**\n```", "```")
            fixed_script = "\n".join(script_sections) if script_sections else None
            
            
            #######################################
            message_to_llm = f"""
            This is the input script:\n{input_script}.
            This is the error message:\n{error_message}.
            This is the corrected script for the error encountered:\n{fixed_script}.
            
            Compare and tell if the error is fixed in the corrected script or not.
            Return a bullet points content for the fixes applied.
            Format:
            ```
            
            Error Message Explanation: 
            ...<content>...
            
            Fixes applied: 
            1). ...<fix 1>...
            >>(fixed code)
            
            2). ...<fix 2>...
            >>(fixed code)
            
            .
            
            .
            
            n). ...<fix n>...
            >>(fixed code)
            
            
            Final Thought:
            ."""
            response = llm.invoke(message_to_llm)
            output = response.content
            # print("*"*50)
            # print("\n")
            # print(f"LLM2 (This checks if the error is being correctly fixed or not):\n"+"*"*30)
            # print(output)
            json_output=get_error_explanation_and_fix(output)
            json_output['Error Fix Attempt']=[i]
            
            # print("*"*80)

            #######################################
            
            script = fixed_script
            if script is None:
                print("Script is None, which means fixed script generated by LLM1 was not in the proper format.")
            error_details.extend([json_output])
            
    

    return """print("Error can't be fixed")""",error_details
        


##################################################################
def invoke_tool_with_capture(script, local_vars):
    buffer = io.StringIO()
    original_stdout = sys.stdout
    
    sys.stdout = buffer

    try:

        # Use the same execution environment as run_script
        exec(script, local_vars, local_vars)
        output = buffer.getvalue()

        return output.strip(), local_vars
    except Exception as e:
        sys.stdout = original_stdout
        traceback_str = traceback.format_exc()
        error_report = f"An error occurred: {e}\n\nTraceback:\n{traceback_str}"
        return error_report, local_vars
    finally:
        sys.stdout = original_stdout
        
        # Close any plots that might have been created
        plt.close('all')

